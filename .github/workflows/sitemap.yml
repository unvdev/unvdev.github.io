name: Generate Sitemap

on:
  push:
    branches:
      - main  # change if your Pages branch is different

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install -g sitemap-generator-cli
          npm install cheerio

      - name: Determine site URL
        id: siteurl
        run: |
          if [ -f CNAME ]; then
            domain=$(cat CNAME | tr -d '[:space:]')
            if [ -z "$domain" ]; then
              echo "CNAME is empty. Skipping sitemap generation."
              echo "skip=true" >> $GITHUB_OUTPUT
            else
              echo "url=https://$domain" >> $GITHUB_OUTPUT
            fi
          else
            echo "CNAME file not found. Skipping sitemap generation."
            echo "skip=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate sitemap
        if: steps.siteurl.outputs.skip != 'true'
        run: |
          sitemap-generator ${{ steps.siteurl.outputs.url }} --strip-querystring -d ./sitemap-tmp --verbose
          if [ -f ./sitemap-tmp/sitemap.xml ]; then
            mv ./sitemap-tmp/sitemap.xml ./sitemap.xml
          else
            echo "sitemap.xml not found. Skipping commit."
            exit 0
          fi

      - name: Mark nav pages in sitemap
        if: steps.siteurl.outputs.skip != 'true'
        run: |
          node - <<'EOF'
          const fs = require('fs');
          const path = require('path');
          const cheerio = require('cheerio');

          const sitemapPath = path.join(process.cwd(), 'sitemap.xml');
          let sitemap = fs.readFileSync(sitemapPath, 'utf8');

          async function checkNav(url) {
            try {
              const res = await fetch(url);
              const html = await res.text();
              const $ = cheerio.load(html);
              return $('meta[name="nav"][content="true"]').length > 0;
            } catch (e) {
              console.error("Failed to fetch", url, e);
              return false;
            }
          }

          (async () => {
            const urls = [...sitemap.matchAll(/<loc>(.*?)<\/loc>/g)].map(m => m[1]);
            let updated = sitemap;

            for (const url of urls) {
              if (await checkNav(url)) {
                updated = updated.replace(
                  new RegExp(`<loc>${url}</loc>`),
                  `<loc>${url}</loc><nav>true</nav>`
                );
                console.log("Marked nav page:", url);
              }
            }

            fs.writeFileSync(sitemapPath, updated, 'utf8');
          })();
          EOF

      - name: Commit and push sitemap
        if: steps.siteurl.outputs.skip != 'true'
        env:
          FG_PAT_TOKEN: ${{ secrets.FG_PAT_TOKEN }}
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add sitemap.xml
          git commit -m "Update sitemap.xml" || echo "No changes to commit"
          git push https://x-access-token:${FG_PAT_TOKEN}@github.com/${{ github.repository }}.git HEAD:main
